2
* Emacs Configuration
:PROPERTIES:
:header-args: :tangle ~/.emacs.d/init.el
:END:
** Package Managers
*** Straight.el

It's kind of annoying that I need =straight.el= as well as =package.el=.

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

*** Package.el, MELPA, and Use-Package

This is the real bread and butter.
=package.el= downloads and installs packages;
=MELPA= is a repository of such packages,
and =use-package= is a helpful macro system that also supports lazy-loading.

#+begin_src emacs-lisp
  (setq use-package-compute-statistics t)
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

  (eval-when-compile
    (require 'use-package)
    (setq use-package-always-ensure t))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

#+end_src
** Miscellaneous Settings

#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :preface
    (defun ryl/check-darwin (filename)
      (if (equal system-type 'darwin) filename "no"))
    (defun ryl/check-linux (filename)
      (if (equal system-type 'gnu/linux) filename "no"))
    :custom
    (minibuffer-prompt-properties '(read-only t cursor-intangible t))
    (completion-cycle-threshold 3)
    (read-extended-command-predicate #'command-completion-default-include-p)
    (tab-always-indent 'complete)
    (tab-width 2)
    (enable-recursive-minibuffers t)
    (scroll-margin 0)
    (scroll-conservatively 101)
    (scroll-preserve-screen-position t)
    (auto-window-vscroll nil)
    (next-line-add-newlines t)
    (custom-file "~/.config/emacs-customize.el")
    :init
    (load custom-file)
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    (setq-default indent-tabs-mode nil)
    (setq ring-bell-function
      (lambda ()
        (let ((orig-fg (face-foreground 'mode-line)))
          (set-face-foreground 'mode-line "#F2804F")
          (run-with-idle-timer 0.1 nil
                               (lambda (fg) (set-face-foreground 'mode-line fg))
                               orig-fg))))
    (set-fringe-mode 20))

  (use-package scroll-bar
  :ensure nil
  :config (scroll-bar-mode -1))

  (when (equal system-type 'gnu/linux)
    (setenv "SHELL" "/bin/bash")
    (setenv "PATH" "/home/robbie/.local/bin:/home/robbie/bin:/home/robbie/src:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:")
    (add-to-list 'exec-path "/usr/local/bin")
    (add-to-list 'exec-path "/usr/bin")
    (add-to-list 'exec-path "/home/robbie/src")
    (add-to-list 'exec-path "/home/robbie/bin"))
#+end_src

#+begin_src emacs-lisp
  (use-package expand-region)
  (use-package change-inner
    :bind
    ("M-i" . change-inner)
    ("M-o" . change-outer))
#+end_src

** Miscellaneous Continued
#+begin_src emacs-lisp
  (use-package diminish
    :demand t)

  (use-package elcord
    :demand t
    :config (if (equal system-type 'darwin) elcord-mode))
#+end_src
** UI Tweaks
*** Fonts
It's sort of a shame that the =ligature= package doesn't appear to let you set
arbitrary length ligatures; would be nice to have any number of tildes and dashes working.


#+begin_src emacs-lisp 
    (defvar ryl/default-font-size 125)
    (set-frame-width nil 100)
    (set-frame-height nil 36)
    (set-frame-position nil 400 20)

#+end_src

#+begin_src emacs-lisp
    (use-package ligature
      :init
      (ligature-set-ligatures t '(("-" (rx (+ "-")))
                                  ("=" (rx (+ "=")))
                                  ("~" (rx (+ "~")))))
      (ligature-set-ligatures t
                              '("<->" "<-->" "<--->" "<---->" "<----->"  "<=>" "<==>" "<===>"
                                "<====>" "<=====>"  "<**>" "<***>" "<****>" "<*****>"
                                "<!--" "<!---"  "<$" "<$>" "$>" "<." "<.>" ".>"
                                "<*" "<*>" "*>" "<\\" "<\\>" "\\>" "</" "</>" "/>" "<\""
                                "<\">" "\">" "<'" "<'>" "'>" "<^" "<^>" "^>" "<&" "<&>"
                                "&>" "<%" "<%>" "%>" "<@" "<@>" "@>" "<#" "<#>" "#>"
                                "<+" "<+>" "+>" "<-" "<->" "->" "<!" "<!>" "!>" "<?"
                                "<?>" "?>" "<|" "<|>" "|>" "<:" "<:>" ":>"
                                "::" ":::" "::::"  "->" "->-" "->--" "->>" "->>-"
                                "->>--" "->>>" "->>>-" "->>>--" "-->" "-->-" "-->--" "-->>"
                                "-->>-" "-->>--" "-->>>" "-->>>-" "-->>>--" ">-" ">--" ">>-"
                                ">>--" ">>>-" ">>>--" "=>" "=>=" "=>==" "=>>" "=>>=" "=>>=="
                                "=>>>" "=>>>=" "=>>>==" "==>" "==>=" "==>==" "==>>" "==>>="
                                "==>>==" "==>>>" "==>>>=" "==>>>==" ">=" ">==" ">>=" ">>=="
                                ">>>=" ">>>==" "<-" "-<-" "--<-" "<<-" "-<<-" "--<<-" "<<<-"
                                "-<<<-" "--<<<-" "<--" "-<--" "--<--" "<<--" "-<<--" "--<<--"
                                "<<<--" "-<<<--" "--<<<--" "-<" "--<" "-<<" "--<<" "-<<<"
                                "--<<<" "<=" "=<=" "==<=" "<<=" "=<<=" "==<<=" "<<<=" "=<<<="
                                "==<<<=" "<==" "=<==" "==<==" "<<==" "=<<==" "==<<==" "<<<=="
                                "=<<<==" "==<<<==" "=<" "==<" "=<<" "==<<" "=<<<" "==<<<"
                                ">=>" ">->" ">-->" ">==>" "<=<" "<-<" "<--<" "<==<"  ">>"
                                ">>>" "<<" "<<<"  ":+" ":-" ":=" "+:" "-:" "=:" "=^"
                                "=+" "=-" "=*" "=/" "=%" "^=" "+=" "-=" "*=" "/=" "%="
                                "/\\" "\\/"  "<>" "<+" "<+>" "+>"))
      (global-ligature-mode t))
#+end_src
*** Mode-Line
#+begin_src emacs-lisp
  (use-package moody
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode)
    (moody-replace-eldoc-minibuffer-message-function))
#+end_src

*** Indentation
To be honest, I'm not sure what "awk" and "k&r" styles are precisely...
#+begin_src emacs-lisp
  (use-package cc-vars
    :ensure nil
    :custom
    (c-default-style '((awk-mode . "awk")
                       (other . "k&r"))))

  (use-package lua-mode
    :interpreter ("lua" . lua-ts-mode)
    :custom
    (lua-indent-level 2))

  (use-package python
    :ensure nil
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode))
#+end_src
*** Dashboard
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    :custom
    (dashboard-startup-banner "~/.emacs.d/alanza.png")
    (dashboard-banner-logo-title "You wake up early in the morning and you work all day; that's the only secret.")
    (dashboard-center-content t)
    (dashboard-items '((recents . 5)
                       (bookmarks . 5)
                       (agenda . 5)
                       (registers . 5)))
    (dashboard-icon-type 'all-the-icons)
    (dashboard-set-file-icons t))
#+end_src

** Org Mode
#+begin_src emacs-lisp
    (use-package org
      :bind (("C-c l" . org-store-link)
             ("C-c a" . org-agenda)
             ("C-c c" . org-capture))
      :mode ("\\.org\\'" . org-mode)
      :hook ((org-mode . visual-line-mode)
             (org-mode . org-indent-mode))
      :custom
      (org-ellipsis " â–¾")
      (org-src-fontify-natively t)
      (org-fontify-quote-and-verse-blocks t))

  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
          (python . t)
          (shell . t)
          (lua . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

  (use-package conf-mode)

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))

  (use-package org-journal
    :custom
    (org-journal-dir "~/Dropbox/journal")
    (org-journal-file-type 'weekly))

  (defun ryl/org-babel-tangle-config ()
    (when (or (string-equal (buffer-file-name)
                            (expand-file-name "~/system.org"))
              (string-equal (buffer-file-name)
                            (expand-file-name "~/src/moire/moire-theme.org")))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ryl/org-babel-tangle-config)))
#+end_src

** LaTeX
Somehow I'm back to using different PDF viewers on macOS vs Linux. Sigh-oyek.

#+NAME: LIBGS
#+begin_src emacs-lisp :tangle no
  (if (eq system-type 'darwin) "/opt/homebrew/opt/ghostscript/lib/libgs.dylib" "/usr/lib64/libgs.so")
#+end_src

#+NAME: PDF-VIEWER
#+begin_src emacs-lisp :tangle no
    (if (eq system-type 'darwin) "Sioyek" "Zathura")
#+end_src

 #+begin_src emacs-lisp :noweb yes
   (use-package tex
     :ensure auctex
     :mode ("\\.tex\\'" . tex-mode)
     :config
     (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
     (add-to-list 'TeX-expand-list
                  '("%sn" (lambda () server-name)))
     (add-to-list 'TeX-view-program-list
                  '("Zathura"
                    ("zathura "
                     (mode-io-correlate "--synctex-forward %n:0:\"%b\" -x \"emacsclient --socket-name=%sn +%{line} %{input}\" ")
                     "%o")
                    "zathura"))
     (add-to-list 'TeX-view-program-list
                  '("Sioyek"
                    ("sioyek "
                     (mode-io-correlate "--inverse-search \"emacsclient --socket-name=%sn +%2 %1\" --forward-search-file \"%b\" --forward-search-line %n ")
                     "%o")
                    "sioyek"))
     (add-to-list 'TeX-view-program-selection
                  '(output-pdf "<<PDF-VIEWER()>>"))
     :custom
     (TeX-PDF-mode t)
     (TeX-source-correlate-mode t)
     (TeX-source-correlate-start-server t)
     (LaTeX-electric-left-right-brace t)
     (TeX-electric-math '("$" . "$"))
     (preview-image-type 'dvisvgm))

   (eval-after-load "preview"
     '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))
   (eval-after-load "preview"
     '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzcd}" t))

   (use-package auctex-latexmk
     :after tex
     :config (auctex-latexmk-setup))

   (use-package preview-dvisvgm
     :custom
     (preview-LaTeX-command
      '("%`xelatex --no-pdf \"\\nonstopmode\\nofiles\\PassOptionsToPackage{"
        (", " . preview-required-option-list)
        "}{preview}\\AtBeginDocument{\\ifx\\ifPreview\\undefined" preview-default-preamble"\\fi}\"%' \"\\detokenize{\" %(t-filename-only) \"}\""))
     (preview-dvisvgm-pdf-command
      "dvisvgm --no-fonts _region_.xdv --page=- --output=\"%m/prev%%3p.svg\"")
     :after tex)
#+end_src

** SuperCollider

#+NAME: SCEL-INSTALLATION
#+begin_src emacs-lisp :tangle no
  (if (eq system-type 'darwin)
      "~/Library/Application Support/SuperCollider/downloaded-quarks/scel/el"
    "~/.local/share/SuperCollider/downloaded-quarks/scel/el")
#+end_src

#+begin_src emacs-lisp :noweb yes
  (add-to-list 'load-path "<<SCEL-INSTALLATION()>>")
  (require 'sclang)

  (use-package w3m
    :defer t)
#+end_src

** Programming
*** Parentheses, Pairs
#+begin_src emacs-lisp
      (use-package paren
        :ensure nil
        :custom (show-paren-delay 0)
        :config (show-paren-mode +1))

      (use-package elec-pair
        :ensure nil
        :hook (prog-mode . electric-pair-mode))
#+end_src

*** Escape Sequences
#+begin_src emacs-lisp
  (use-package highlight-escape-sequences
    :hook (prog-mode . hes-mode))
#+end_src

*** Linting
#+begin_src emacs-lisp
  (use-package flycheck
    :config (global-flycheck-mode +1))
  (use-package flymake)
#+end_src

*** Git
#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))

  (use-package diff-hl
    :config (global-diff-hl-mode)
    (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+end_src

Also setup yadm, which requires tramp.
#+begin_src emacs-lisp
    (use-package tramp
      :defer t
      :config
      (add-to-list 'tramp-methods
                   '("yadm"
                     (tramp-login-program "yadm")
                     (tramp-login-args (("enter")))
                     (tramp-login-env (("SHELL") ("/bin/sh")))
                     (tramp-remote-shell "/bin/sh")
                     (tramp-remote-shell-args ("-c")))))

    (defun yadm ()
      (interactive)
      (magit-status "/yadm::"))
#+end_src

*** Completion
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))

  (use-package corfu
    :custom
    (corfu-auto t)
    (corfu-cycle t)
    :config
    (global-corfu-mode 1))

  (use-package kind-icon
    :after corfu
    :custom (kind-icon-default-face 'corfu-default)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
*** Minibuffer "Telescope"
#+begin_src emacs-lisp
  (use-package vertico
    :custom (vertico-resize t)
    (vertico-cycle t)
    :init (vertico-mode))
#+end_src
*** Snippets
#+begin_src emacs-lisp
  (use-package tempel
    :init
    (defun tempel-setup-capf ()
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))
    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf))
#+end_src
*** Eglot
Do I have to do anything else? Even this at all?
#+begin_src emacs-lisp
  (use-package eglot
    :defer t
    :ensure nil
    :config
    (add-to-list 'eglot-server-programs
                 '((zig-ts-mode :language-id "zig") "zls"))
    (add-to-list 'eglot-server-programs
                 '((zine-mode :language-id "superhtml") "superhtml" "lsp"))
    (add-to-list 'eglot-server-programs
                 '(((ziggy-schema-mode :language-id  "ziggy-schema")
                    (ziggy-mode :language-id "ziggy")) "ziggy" "lsp"))
    )

  (use-package eglot-tempel
    :config
    (eglot-tempel-mode))
#+end_src
*** Which-Key
#+begin_src emacs-lisp
  (use-package which-key
    :custom
    (which-key-show-early-on-C-h t)
    (which-key-idle-delay 2)
    (which-key-idle-secondary-delay 0.05)
    :config (which-key-mode))
#+end_src
** Theme

#+begin_src emacs-lisp
    (add-to-list 'custom-theme-load-path "~/src/moire")
    (use-package catppuccin-theme
      :custom 
      (catppuccin-highlight-matches t)
      (catppuccin-italic-comments t)
      (catppuccin-italic-variables t))
    (defun ctp/text-org-blocks ()
       (face-remap-add-relative 'org-block (list :foreground (catppuccin-get-color 'text))))

    (add-hook 'org-mode-hook 'ctp/text-org-blocks)
    (let ((line (face-attribute 'mode-line :underline)))
      (set-face-attribute 'mode-line          nil :overline   line)
      (set-face-attribute 'mode-line-inactive nil :overline   line)
      (set-face-attribute 'mode-line-inactive nil :underline  line)
      (set-face-attribute 'mode-line          nil :box        nil)
      (set-face-attribute 'mode-line-inactive nil :box        nil))

    (defun ryl/catppuccin-flavor (flavor) "Set catppuccin flavor to FLAVOR."
           (setq catppuccin-flavor flavor)
            (catppuccin-reload))

  (defun ryl/apply-theme (appearance)
    "Load theme, taking current system APPEARANCE into consideration."
    (mapc #'disable-theme custom-enabled-themes)
    (pcase appearance
      ('light (setq catppuccin-flavor 'latte)
              (load-theme 'catppuccin t))
      ('dark (setq catppuccin-flavor 'macchiato)
             (load-theme 'catppuccin t))))

  (add-hook 'ns-system-appearance-change-functions #'ryl/apply-theme)
    #+end_src

*** Zig TS Mode

#+begin_src emacs-lisp
  (use-package zig-ts-mode
    :straight (zig-ts-mode
               :type git
               :host github
               :repo "robbielyman/zig-ts-mode"
               :branch "issue-1"))
#+end_src

*** Zine Modes
#+begin_src emacs-lisp
  (use-package zine-mode
    :straight (zine-mode
               :type git
               :host github
               :repo "robbielyman/zine-mode"
               :branch "main"))
#+end_src

#+begin_src emacs-lisp
  (use-package ziggy-mode
    :straight (ziggy-mode
               :type git
               :host github
               :repo "robbielyman/ziggy-mode"
               :branch "main"))
#+end_src

*** Other Modes 
#+begin_src emacs-lisp
  (use-package rust-mode)
  (use-package typescript-mode)
  (use-package lua-mode)
  (use-package csound-mode)
  (use-package ansi-color
      :hook (compilation-filter . ansi-color-compilation-filter)) 
#+end_src

* Zathura

#+begin_src conf :tangle (ryl/check-linux "~/.config/zathura/zathurarc")
  set selection-clipboard clipboard
  set synctex true
#+end_src

* Kitty

#+begin_src conf :tangle "~/.config/kitty/kitty.conf" :noweb yes 
  listen_on unix:/tmp/kitty
  allow_remote_control  yes

  font_family      Iosevka Light 
  italic_font      Iosevka Light Italic
  bold_font        Iosevka Heavy 
  bold_italic_font Iosevka Heavy Italic

  symbol_map U+23fb-23fe,U+2665,U+26a1,U+2b58,U+e000-U+e00a Symbols Nerd Font Mono
  symbol_map U+e0a0-U+e0a3,U+e0b0-U+e0c8,U+e0ca,U+e0cc-U+e0d4 Symbols Nerd Font Mono
  symbol_map U+e200-U+e2a9,U+e300-U+e3eb,U+e5fa-U+e631,U+e700-U+e7c5 Symbols Nerd Font Mono
  symbol_map U+ea60-U+ebeb,U+f000-U+f2e0,U+f300-U+f32f,U+f400-U+f4a9 Symbols Nerd Font Mono
  symbol_map U+f500-U+fd46 Symbols Nerd Font Mono

  font_size 13.0
  disable_ligatures never

  map ctrl+1 goto_tab 1
  map ctrl+2 goto_tab 2
  map ctrl+3 goto_tab 3
  map ctrl+4 goto_tab 4
  map ctrl+5 goto_tab 5
  map ctrl+6 goto_tab 6
  map ctrl+7 goto_tab 7
  map ctrl+8 goto_tab 8
  map ctrl+9 goto_tab 9

  background_opacity 0.85

  # The basic colors
  foreground              #C6D0F5
  background              #303446
  selection_foreground    #303446
  selection_background    #F2D5CF

  # Cursor colors
  cursor                  #F2D5CF
  cursor_text_color       #303446

  # URL underline color when hovering with mouse
  url_color               #F2D5CF

  # Kitty window border colors
  active_border_color     #BABBF1
  inactive_border_color   #737994
  bell_border_color       #E5C890

  # OS Window titlebar colors
  wayland_titlebar_color system
  macos_titlebar_color system

  # Tab bar colors
  active_tab_foreground   #232634
  active_tab_background   #CA9EE6
  inactive_tab_foreground #C6D0F5
  inactive_tab_background #292C3C
  tab_bar_background      #232634

  # Colors for marks (marked text in the terminal)
  mark1_foreground #303446
  mark1_background #BABBF1
  mark2_foreground #303446
  mark2_background #CA9EE6
  mark3_foreground #303446
  mark3_background #85C1DC

  # The 16 terminal colors

  # black
  color0 #51576D
  color8 #626880

  # red
  color1 #E78284
  color9 #E78284

  # green
  color2  #A6D189
  color10 #A6D189

  # yellow
  color3  #E5C890
  color11 #E5C890

  # blue
  color4  #8CAAEE
  color12 #8CAAEE

  # magenta
  color5  #F4B8E4
  color13 #F4B8E4

  # cyan
  color6  #81C8BE
  color14 #81C8BE

  # white
  color7  #B5BFE2
  color15 #A5ADCE

#+end_src
